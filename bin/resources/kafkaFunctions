#!/bin/bash

## ==========================================================
## 1. Functions related to Kafka
## ==========================================================

##
## Specifically checks for Kafka
##
isKafkaStarted() {
	echo `zkPing "dump" "/kafka/"`
}

##
##
##
startKafka() {
	status=`isPidValid "${KAFKA_APP_NAME}"`
	emergencyExit ${status} "GYMPB0124E: ${KAFKA_READABLE} is already running."

	log INFO "GYMPB0112I: Starting ${KAFKA_READABLE}."
	checkDependent ${KAFKA_APP_NAME}

	cd ${SERVICES_DIR}/${KAFKA_APP_NAME} && ./bin/kafka-server-start.sh ${SERVICES_DIR}/conf/${KAFKA_APP_NAME}/${KAFKA_APP_NAME}-server.properties >>${KAFKA_LOG} 2>>${KAFKA_LOG} &
	writePID ${KAFKA_APP_NAME} ${!}
	checkInfraStarted "dump" "/kafka/" ${KAFKA_READABLE}
}

##
##
##
stopKafka() {
	log INFO "GYMPB0113I: Stopping ${KAFKA_READABLE}."
	checkDependentee ${KAFKA_APP_NAME}

	pid=`getPID ${KAFKA_APP_NAME}`
	if [ -z "$pid" ]; then
		log INFO "GYMPB0108I: ${KAFKA_READABLE} not started."
	else
		log DEBUG "GYMPB0119I: Attempting to kill processes associated with ${pid}"
		killAssociatively "-15" ${pid}
	
		tryCount=${TRY_COUNT}
		isKafkaDown=0

		while [ $tryCount -ne 0 ]; do
			psStatus=`getPsByName ${KAFKA_APP_NAME}.${KAFKA_APP_NAME}`
			if [ -z "${psStatus}" ]; then
				isKafkaDown=1; break
			fi
			sleep ${SLEEP_TIME}
			tryCount=$(( ${tryCount} - 1 ))
		done

		if [ ${isKafkaDown} -eq 0 ]; then
			emergencyExit "1" "GYMPB0114E: ${KAFKA_READABLE} is not stopping."
		else
			log INFO "GYMPB0110I: ${KAFKA_READABLE} stopped."
			removePID ${KAFKA_APP_NAME}
		fi
	fi
}

