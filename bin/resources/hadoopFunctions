#!/bin/bash

## ==========================================================
## 1. Functions related to Hadoop
## ==========================================================

##
## From bootstraps.sh
## Pending:
##	1. Need to save PID somewhere, $WAIT_PID; E.g. saveNameNodePid() { ... }
##
nn_service() {
	cmd=$1
	NAMENODES=$(${HADOOP_PREFIX}/bin/hdfs getconf -namenodes)
	
	log DEBUG "GYMPB0000I: ${cmd} namenodes on [${NAMENODES}]"
	
	"${HADOOP_PREFIX}/sbin/hadoop-daemon.sh" \
		--config "${HADOOP_CONF_DIR}" \
		--hostnames "${NAMENODES}" \
		--script "${HADOOP_PREFIX}/bin/hdfs" ${cmd} namenode 
	  
	SECONDARY_NAMENODES=$(${HADOOP_PREFIX}/bin/hdfs getconf -secondarynamenodes 2>/dev/null)
	
	if [ -n "${SECONDARY_NAMENODES}" ]; then
		log DEBUG "GYMPB0000I: ${cmd} secondary namenodes [${SECONDARY_NAMENODES}]"
	
	  	"${HADOOP_PREFIX}/sbin/hadoop-daemon.sh" \
			--config "${HADOOP_CONF_DIR}" \
			--hostnames "${SECONDARY_NAMENODES}" \
			--script "${HADOOP_PREFIX}/bin/hdfs" $cmd secondarynamenode
	  
		if [ ${WAIT_PID} -eq 0 ]; then
	  		WAIT_PID=$(cat /tmp/hadoop-*-secondarynamenode.pid |head -1)
	  	fi
	fi
    
    	if [ ${WAIT_PID} -eq 0 ];then
		WAIT_PID=$(cat /tmp/hadoop-*-namenode.pid |head -1)
    	fi
    
    	"${HADOOP_PREFIX}"/sbin/yarn-daemon.sh --config ${HADOOP_CONF_DIR} ${cmd} resourcemanager	
}

##
## Pending:
##	1. Need to save PID somewhere
##
dt_service() {
	cmd=${1}
	log DEBUG "GYMPB0000I: ${cmd} datanode"

	"${HADOOP_PREFIX}/sbin/hadoop-daemon.sh" \
		--config "${HADOOP_CONF_DIR}" \
	    	--script "${HADOOP_PREFIX}/bin/hdfs" ${cmd} datanode

	log DEBUG "GYMPB0000I: ${cmd} YARN nodemanager"

	"${HADOOP_PREFIX}"/sbin/yarn-daemon.sh --config ${HADOOP_CONF_DIR} ${cmd} nodemanager	
	if [ ${WAIT_PID} -eq 0 ];then
		WAIT_PID=$(cat /tmp/hadoop-*-datanode.pid |head -1)
	fi
}

##
## Comment:
## 	1. Not changing the paths to variables yet to remain apparent
##
copy_spark_jar_and_conf() {
	log DEBUG "GYMPB0000I: Waiting for recovering from safemode"
	$NPI_HOME/services/hadoop/bin/hdfs dfsadmin -safemode wait

	log DEBUG "GYMPB0000I: Creating /work/hadoop-conf folder"
	$NPI_HOME/services/hadoop/bin/hdfs dfs -mkdir -p /work/hadoop-conf

	log DEBUG "GYMPB0000I: Copying hadoop config files to hdfs"
	$NPI_HOME/services/hadoop/bin/hdfs dfs -copyFromLocal -f $NPI_HOME/services/hadoop/etc/hadoop/core-site.xml /work/hadoop-conf/core-site.xml
	$NPI_HOME/services/hadoop/bin/hdfs dfs -copyFromLocal -f $NPI_HOME/services/hadoop/etc/hadoop/hdfs-site.xml /work/hadoop-conf/hdfs-site.xml
	$NPI_HOME/services/hadoop/bin/hdfs dfs -copyFromLocal -f $NPI_HOME/services/hadoop/etc/hadoop/yarn-site.xml /work/hadoop-conf/yarn-site.xml
	$NPI_HOME/services/hadoop/bin/hdfs dfs -copyFromLocal -f $NPI_HOME/services/hadoop/etc/hadoop/spark-defaults.conf /work/hadoop-conf/spark-defaults.conf

	log DEBUG "Creating /work/spark-lib folder"
	$NPI_HOME/services/hadoop/bin/hdfs dfs -mkdir -p /work/spark-lib

	log DEBUG "Copying spark assembly jar to hdfs"
	$NPI_HOME/services/hadoop/bin/hdfs dfs -copyFromLocal -f $NPI_HOME/services/spark/lib/spark-assembly-*.jar /work/spark-lib/spark-assembly-hadoop.jar
}

##
## Comment:
##	1. Wrapper for calling initHadoopNameNode.sh
##
initHadoopNameNode() {
	log INFO "initHadoopNameNode"
}

##
## There are initial errors not able surpress by this script ***
##
checkHadoop() {
	isHadoopUp=0
	tryCount=${TRY_COUNT}
	cmd="${HADOOP_PREFIX}/bin/hdfs dfsadmin -report"
	
	while [ ${tryCount} -ne 0 ]; do
		dfsAdminResult=`${cmd}`
		if [ ! -z "${dfsAdminResult}" ]; then
			isHadoopUp=1
			break			
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isHadoopUp} -eq 0 ]; then
		log ERROR "GYMPB0000E: Hadoop is not starting."
		exit 1
	fi
	
	isHadoopUp=0
	tryCount=${TRY_COUNT}
	cmd="${HADOOP_PREFIX}/bin/hdfs dfs -ls ${HADOOP_NAMENODE_URL}"

	while [ ${tryCount} -ne 0 ]; do
		dfsResult=`${cmd} | grep "work"`
		if [ ! -z "${dfsResult}" ]; then
			isHadoopUp=1
			break			
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isHadoopUp} -eq 0 ]; then
		log ERROR "GYMPB0000E: Hadoop is not starting."
		exit 1
	fi
}

startaHadoop() {
	log INFO "GYMPB0000E: TODO."
}

stopHadoop() {
	log INFO "GYMPB0000E: TODO."
}
