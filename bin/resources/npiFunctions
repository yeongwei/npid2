#!/bin/bash

## ==========================================================
## 1. Functions related to NPI
## ==========================================================

##
## Usage: getPortResolution <default_port> <component_name> 
##
getPortResolution() {
	defaultPort=${1}
	componentName=${2}

	case "${componentName}" in 
		"${NPI_STORAGE_APP_NAME}") 	
			echo $(( $defaultPort + 10 ))
		;;
		"${NPI_ANALYTICS_APP_NAME}") 
			echo $(( $defaultPort + 20 ))
		;;
		"${NPI_COLLECTOR_APP_NAME}") 
			echo $(( $defaultPort + 30 ))
		;;
		"${NPI_UI_APP_NAME}") 
			echo $defaultPort
		;;
		"${NPI_APP_NAME}")
			echo $defaultPort
		;;
		*)
			emergencyExit "1" "GYMPB0000E: Port resolution failed due to invalid NPI component name."
		;;
	esac
}

##
## Pending:
##	1. Variable ${COMPONENT} should come from stdin
##
startNpi() {
	status=`isPidValid ${1}`
	emergencyExit ${status} "GYMPB0000E: ${1} is already running."	

	log INFO "GYMPB0000I: Starting ${1}"
	checkDependent ${NPI_APP_NAME}	

	check_parameters

	if [ -z "${1}" ]; then	
		emergencyExit "1" "GYMPB0000E: Please provide a ${NPI_APP_NAME} component name."
	fi 	
	
	case "${1}" in
		"${NPI_STORAGE_APP_NAME}") ;;
		"${NPI_ANALYTICS_APP_NAME}") ;;
		"${NPI_COLLECTOR_APP_NAME}") ;;
		"${NPI_UI_APP_NAME}") ;;
		"${NPI_APP_NAME}") ;;
		*)
			emergencyExit "1" "GYMPB0000E: Please provide a valid ${NPI_APP_NAME} component name."
		;;
	esac
	COMPONENT=${1}

	WEB_PORT=`getPortResolution 8081 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Http Port - ${WEB_PORT}"

	WEB_SEC_PORT=`getPortResolution 9443 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Https Port - ${WEB_SEC_PORT}"

	JMX_PORT=`getPortResolution 9010 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Jmx Port - ${JMX_PORT}"

	AKKA_CLUSTER_PORT=`getPortResolution 2552 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Akka Cluster Port - ${AKKA_CLUSTER_PORT}"

	COMPONENT=`echo ${COMPONENT} | sed s/npi\-//`	
	if [ ${COMPONENT} == "${NPI_APP_NAME}" ]; then
		COMPONENT=""
	fi

	JVM_OPT="${JVM_OPT} -Dhttp.port=${WEB_PORT} -Dhttps.port=${WEB_SEC_PORT} -Djmx.port=${JMX_PORT} -Dakka.remote.netty.tcp.port=${AKKA_CLUSTER_PORT} -Dakka.remote.netty.tcp.bind-port=${AKKA_CLUSTER_PORT}"

	if [ ! -z $STORAGE_URL ];then
	  JVM_OPT="${JVM_OPT} -Dstorage.uri=${STORAGE_URL}"
	fi

	if [ ! -z $ZK_URL ];then
	  JVM_OPT="${JVM_OPT} -Dakka.cluster.seed.zookeeper.url=${ZK_URL} -Dkafka-snapshot-store.zookeeper.connect=${ZK_URL}/${ZKPREFIX}kafka -Dkafka-journal.zookeeper.connect=${ZK_URL}/${ZKPREFIX}kafka"
	fi

	if [ ! -z ${COMPONENT} ];then
	   JVM_OPT="${JVM_OPT} -Dnpi.component=${COMPONENT}"
	fi

	if [ ! -z ${JDBC_SERVICE} ];then
		JVM_OPT="${JVM_OPT} -Dstorage.jdbc-service=${JDBC_SERVICE}"
	fi

	export JVM_OPT

	${NPI_HOME}/bin/npi > /dev/null 2>> ${NPI_LOG} &
	writePID ${1} ${!}

	tryCount=${TRY_COUNT}
	isNpiUp=0

	while [ ${tryCount} -ne 0 ]; do
		psStatus=`getPsByName 'Dprog.name=npi'`
		if [ ! -z "${psStatus}" ]; then
			isNpiUp=1
			break
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isNpiUp} -eq 1 ]; then
		log INFO "GYMPB0000I: ${1} started." 
	else 
		log ERROR "GYMPB0000E: ${1} is not starting."
	fi
}

##
##
##
stopNpi() {
	log INFO "GYMPB0000I: About to stop ${1}"

	pid=`getPID ${1}`
	if [ -z "${pid}" ]; then
		emergencyExit "1" "GYMPB0000E: ${NPI_READABLE} has no associated PID file."
	else
		kill -SIGTERM ${pid}
		
		tryCount=${TRY_COUNT}
		isNpiDown=0

		while [ ${tryCount} -ne 0 ]; do
			psStatus=`getPsByName 'Dprog.name=npi'`
			if [ -z "${psStatus}" ]; then
				isNpiDown=1
				break
			fi
			sleep ${SLEEP_TIME}
			tryCount=$(( ${tryCount} - 1 ))
		done
		
		if [ ${isNpiDown} -eq 1 ]; then
			removePID ${1}
			log INFO "GYMPB0000I: ${1} stopped."
		else
			log ERROR "GYMPB0000E: ${1} is not stopping."
		fi
	fi
}
