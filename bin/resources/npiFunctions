#!/bin/bash

## ==========================================================
## 1. Functions related to NPI
## ==========================================================

##
## Usage: getPortResolution <default_port> <component_name> 
##
getPortResolution() {
	defaultPort=${1}
	componentName=${2}

	case "${componentName}" in 
		"${NPI_STORAGE_APP_NAME}") 	
			echo $(( $defaultPort + 10 ))
		;;
		"${NPI_ANALYTICS_APP_NAME}") 
			echo $(( $defaultPort + 20 ))
		;;
		"${NPI_COLLECTOR_APP_NAME}") 
			echo $(( $defaultPort + 30 ))
		;;
		"${NPI_UI_APP_NAME}") 
			echo $defaultPort
		;;
		"${NPI_APP_NAME}")
			echo $defaultPort
		;;
		*)
			emergencyExit "1" "GYMPB0000E: Port resolution failed due to invalid NPI component name."
		;;
	esac
}

##
## Expected arguments: "storage, analytics, collector, ui"
##
startNpi() {
	status=`isPidValid ${1}`
	emergencyExit ${status} "GYMPB0000E: ${NPI_READABLE} component is already running."	

	log INFO "GYMPB0000I: Starting `getReadableName ${1}`"
	checkDependent ${NPI_APP_NAME}	

	check_parameters

	if [ -z "${1}" ]; then	
		emergencyExit "1" "GYMPB0000E: Please provide a ${NPI_APP_NAME} component name."
	fi 	
	
	case "${1}" in
		"${NPI_STORAGE_APP_NAME}") ;;
		"${NPI_ANALYTICS_APP_NAME}") ;;
		"${NPI_COLLECTOR_APP_NAME}") ;;
		"${NPI_UI_APP_NAME}") ;;
		"${NPI_APP_NAME}") ;;
		*)
			emergencyExit "1" "GYMPB0000E: Please provide a valid ${NPI_APP_NAME} component name."
		;;
	esac
	COMPONENT=${1}

	WEB_PORT=`getPortResolution 8081 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Http Port is ${WEB_PORT}."

	WEB_SEC_PORT=`getPortResolution 9443 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Https Port is ${WEB_SEC_PORT}."

	JMX_PORT=`getPortResolution 9010 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Jmx Port is ${JMX_PORT}."

	AKKA_CLUSTER_PORT=`getPortResolution 2552 ${COMPONENT}`
	log DEBUG "GYMPB0000D: Akka Cluster Port is ${AKKA_CLUSTER_PORT}."

	# This needs to be removed eventually
	COMPONENT=`echo ${COMPONENT} | sed s/npi\-//`	
	if [ ${COMPONENT} == "${NPI_APP_NAME}" ]; then
		COMPONENT=""
	fi

	COMPONENT_OPT=""
	JVM_OPT="${JVM_OPT} -Dhttp.port=${WEB_PORT} -Dhttps.port=${WEB_SEC_PORT} -Djmx.port=${JMX_PORT} -Dakka.remote.netty.tcp.port=${AKKA_CLUSTER_PORT} -Dakka.remote.netty.tcp.bind-port=${AKKA_CLUSTER_PORT}"

	if [ ! -z $STORAGE_URL ];then
	  JVM_OPT="${JVM_OPT} -Dstorage.uri=${STORAGE_URL}"
	fi

	if [ ! -z $ZK_URL ];then
	  JVM_OPT="${JVM_OPT} -Dakka.cluster.seed.zookeeper.url=${ZK_URL} -Dkafka-snapshot-store.zookeeper.connect=${ZK_URL}/${ZKPREFIX}kafka -Dkafka-journal.zookeeper.connect=${ZK_URL}/${ZKPREFIX}kafka"
	fi

	if [ ! -z ${COMPONENT} ];then
	   JVM_OPT="${JVM_OPT} -Dnpi.component=${COMPONENT}"
	   # COMPONENT_OPT="-component ${COMPONENT}"
	fi

	if [ ! -z ${JDBC_SERVICE} ];then
		JVM_OPT="${JVM_OPT} -Dstorage.jdbc-service=${JDBC_SERVICE}"
	fi

	export JVM_OPT

	${NPI_HOME}/bin/npi ${COMPONENT_OPT} > /dev/null 2>> ${NPI_LOG} &
	writePID ${1} ${!}

	tryCount=${TRY_COUNT}
	isNpiUp=0

	while [ ${tryCount} -ne 0 ]; do
		psStatus=`getPsByName 'Dprog.name=npi'`
		if [ ! -z "${psStatus}" ]; then
			isNpiUp=1
			break
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isNpiUp} -eq 1 ]; then
		log INFO "GYMPB0000I: `getReadableName ${1}` started." 
	else 
		log ERROR "GYMPB0000E: `getReadableName ${1}` is not starting."
	fi
}

##
## Find out all NPI related PIDs and SIGTERM them
## NPI consist of storage, analytics, collector, ui instances
##
stopNpi() {
	log INFO "GYMPB0000I: Stopping `getReadableName ${1}`"

	npiPidFiles=(`getNpiPidFiles`)
	errorsFound=0

	for pidFile in "${npiPidFiles[@]}"; do
		pid=`head -1 ${VAR_DIR}/${pidFile}`
		componentName=`echo ${pidFile} | cut -d. -f1`
		isPidAlive=`ps -ef | grep ${pid} | grep -v grep`
		if [ -z "${isPidAlive}" ]; then
			log WARN "GYMPB0000I: `getReadableName ${componentName}` was stopped."
		else
			kill -SIGTERM ${pid}
			
			tryCount=${TRY_COUNT}
			isDown=0

			while [ ${tryCount} -ne 0 ]; do
				psStatus=`ps -ef | grep ${pid} | grep -v grep`
				if [ -z "${psStatus}" ]; then
					isDown=1
					break
				fi
				sleep ${SLEEP_TIME}
				tryCount=$(( ${tryCount} - 1 ))
			done

			if [ ${isDown} -eq 1 ]; then
				removePID ${componentName}
				log INFO "GYMPB0000I: `getReadableName ${componentName}` stopped."
			else
				log ERROR "GYMPB0000E: `getReadableName ${componentName}` is not stopping."
			fi
		fi
	done;

	log INFO "GYMPB0000I: `getReadableName ${1}` stopped."
}

##
## Checks for 4 components,
## storage, analytics, collector, ui
## 0 - stopped, 1 - started, 2 - partially started
##
getNpiStatus() {
	numberOfComponents=4
	npiPidFiles=(`getNpiPidFiles`)
	numberOfStartedComponents=0
	if [ ${#npiPidFiles[@]} -eq ${numberOfComponents} ]; then
		for pidFile in "${npiPidFiles[@]}"; do
			componentName=`echo $pidFile | cut -d. -f1`
			pidStatus=`isValidPid ${componentName}`
			if [ ${pidStatus} -eq 1 ]; then
				numberOfStartedComponents=$(( ${numberOfStartedComponents} +  1 ))
			fi
		done

		if [ ${numberOfStartedComponents} -eq ${numberOfComponents} ]; then
			# log INFO "GYMPB0000I: ${NPI_READABLE} started."
			echo 1
		elif [ ${numberOfStartedComponents} -eq 0 ]; then
			# log INFO "GYMPB0000I: ${NPI_READABLE} stopped."
			echo 0
		else
			# log INFO "GYMPB0000I: ${NPI_READABLE} partially started."
			echo 2
		fi
	elif [ ${#npiPidFiles[@]} -eq 0 ]; then
		# log INFO "GYMPB0000I: ${NPI_READABLE} stopped."
		echo 0
	else
		# log INFO "GYMPB0000I: ${NPI_READABLE} partially started."
		echo 2
	fi
}
