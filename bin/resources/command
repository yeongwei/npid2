#!/bin/bash

## ==========================================================
## 1. Various routine block that comply to user command
## 2. User command example; start, stop, restart ...
## ==========================================================

##
##
defaultLog="GYMPB0000I Application name is missing / incorrect."

##
## For CMD "start"
##
startRoutine() {
	case "${1}" in
		"${ZOOKEEPER_APP_NAME}")
			startZookeeper
		;;
		"${KAFKA_APP_NAME}")
			startKafka
		;;
		"${HADOOP_APP_NAME}")
			startHadoop
		;;
		"${NPI_APP_NAME}")
			startNpi ${NPI_STORAGE_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_ANALYTICS_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_COLLECTOR_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_UI_APP_NAME}
		;;
		"all")
			startZookeeper; sleep ${SLEEP_TIME}
			startKafka; sleep ${SLEEP_TIME}
			startHadoop; sleep ${SLEEP_TIME}

			startNpi ${NPI_STORAGE_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_ANALYTICS_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_COLLECTOR_APP_NAME}; sleep ${SLEEP_TIME}
			startNpi ${NPI_UI_APP_NAME}
		;;
		*)
			log INFO ${defaultLog}
			npidUsage
		;;
	esac
}

##
## For CMD "stop"
##
stopRountine() {
	case "${1}" in 
		"${ZOOKEEPER_APP_NAME}")
			stopZookeeper
		;;
		"${KAFKA_APP_NAME}")
			stopKafka
		;;
		"${HADOOP_APP_NAME}")
			stopHadoop
		;;
		# "${NPI_STORAGE_APP_NAME}" | "${NPI_ANALYTICS_APP_NAME}" | "${NPI_COLLECTOR_APP_NAME}" | "${NPI_UI_APP_NAME}")
		#	stopNpi ${1}
		# ;;
		"${NPI_APP_NAME}")
			stopNpi "npi"
		;;
		"all")
			stopNpi "npi"; sleep ${SLEEP_TIME}
			stopHadoop; sleep ${SLEEP_TIME}
			stopKafka; sleep ${SLEEP_TIME}
			stopZookeeper
		;;
		*)
			log INFO ${defaultLog}; npidUsage
		;;
	esac
}

##
## For CMD "restart"
##
restartRoutine() {
	case "${1}" in 
		"${ZOOKEEPER_APP_NAME}")
			stopRountine ${ZOOKEEPER_APP_NAME}; sleep ${SLEEP_TIME}; startRoutine ${ZOOKEEPER_APP_NAME}
		;;
		"${KAFKA_APP_NAME}")
			stopRountine ${KAFKA_APP_NAME}; sleep ${SLEEP_TIME}; startRoutine ${KAFKA_APP_NAME}
		;;
		"${HADOOP_APP_NAME}")
			stopRountine ${HADOOP_APP_NAME}; sleep ${SLEEP_TIME}; startRoutine ${HADOOP_APP_NAME}
		;;
		"${NPI_APP_NAME}")
			stopRountine ${NPI_APP_NAME}; sleep ${SLEEP_TIME}; startRoutine ${NPI_APP_NAME}
		;;
		"all")
			stopRountine "all"; sleep ${SLEEP_TIME}; startRoutine "all"
		;;
		*)
			log INFO ${defaultLog}; npidUsage
		;;
	esac
}

##
## For CMD "kill"
##
killRoutineHelper() {
	errors=0
	pidStatus=`ps -ef | grep ${1} | grep -v grep`
	if [ -z "${pidStatus}" ]; then
		errors=$(( ${errors} + 1 ))
	else
		killAssociatively9 ${1}

		tryCount=${TRY_COUNT}
		isKilled=0

		while [ $tryCount -ne 0 ]; do
			psStatus=`ps -ef | grep ${pid} | grep -v grep`
			if [ -z "${psStatus}" ]; then
				isKilled=1
				break
			fi
			sleep ${SLEEP_TIME}
			tryCount=$(( ${tryCount} - 1 ))
		done

		if [ ${isKilled} -ne 1 ]; then
			errors=$(( ${errors} + 1 ))
		fi
	fi

	if [ ${errors} -eq 0 ]; then
		echo 1
	else
		echo 0
	fi
}

##
## For CMD "kill"
## Uses the kill -9 <PID>
## ** Only could kill local processes NOT remote
##

# Kill Zookeeper or Kafka
# Usage: killInfra zookeeper, killInfra kafka
killInfra() {
	pidFile=${VAR_DIR}/${1}.pid
	if [ -f ${pidFile} ]; then
		pid=`head -1 ${pidFile}`
		pidStatus=`isPidValid ${1}`
		if [ ${pidStatus} -eq 1 ]; then
			killStatus=`killRoutineHelper ${pid}`
			if [ ${killStatus} -eq 1 ]; then
				rm ${pidFile}
				log INFO "GYMPB0000I: `getReadableName ${1}` killed."
			else				
				log ERROR "GYMPB0000E: `getReadableName ${1}` not killed."
			fi
		else 
			log INFO "GYMPB0000I: `getReadableName ${1}` not started."
		fi
	else 
			log INFO "GYMPB0000I: `getReadableName ${1}` not started."
	fi
}

killHadoop() {
	hadoopPidFiles=(`getHadoopPidFiles`)
	successKill=0
	for pidFile in "${hadoopPidFiles[@]}"; do
		pid=`head -1 ${pidFile}`
		killStatus=`killRoutineHelper ${pid}`
		if [ ${killStatus} -eq 1 ]; then
			successKill=$(( ${successKill} + 1 ))
			rm ${pidFile}
		else
			log ERROR "GYMPB0000E: Unable to kill ${pid}."
		fi
	done
			
	if [ ${successKill} -eq ${#hadoopPidFiles[@]} ]; then
		log INFO "GYMPB0000I: ${HADOOP_READABLE} killed."
	else
		log ERROR "GYMPB0000E: ${HADOOP_READABLE} not killed."
	fi
}

## Usage: killMultiplePid <applicationName> <pidFile 1> <pidFile 2> ... <pidFile n>
killMultiplePid() {
	appName=${1}
	
	pidFiles=()
	shift # first shift
	while [ ! -z "${1}" ]; do
		pidFiles+=(${1})
		shift
	done
	
	if [ ${#pidFiles[@]} -eq 0 ]; then
		log INFO "GYMPB0000I: `getReadableName ${appName}` not started."
	else
		successKill=0
		for pidFile in "${pidFiles[@]}"; do
			pid=`head -1 ${pidFile}`
			killStatus=`killRoutineHelper ${pid}`
			if [ ${killStatus} -eq 1 ]; then
				successKill=$(( ${successKill} + 1 ))
				rm ${pidFile}
			else
				log ERROR "GYMPB0000E: Unable to kill ${pid}."
			fi
		done

		if [ ${successKill} -eq ${#pidFiles[@]} ]; then
			log INFO "GYMPB0000I: `getReadableName ${appName}` killed."
		else
			log ERROR "GYMPB0000E: `getReadableName ${appName}` not killed."
		fi	
	fi
}

killRoutine() {
	case "${1}" in 
		"${ZOOKEEPER_APP_NAME}") 
			killInfra ${ZOOKEEPER_APP_NAME}
		;;
		"${KAFKA_APP_NAME}") 
			killInfra ${KAFKA_APP_NAME}	 	
		;;
		"${HADOOP_APP_NAME}") 
			killMultiplePid ${HADOOP_APP_NAME} `getHadoopPidFiles`
 		;;
		"${NPI_APP_NAME}") 
			killMultiplePid ${NPI_APP_NAME} `getNpiPidFiles`
		;;
		"all")
			killMultiplePid ${NPI_APP_NAME} `getNpiPidFiles`; sleep ${SLEEP_TIME}
			killMultiplePid ${HADOOP_APP_NAME} `getHadoopPidFiles`; sleep ${SLEEP_TIME}
			killInfra ${KAFKA_APP_NAME}; sleep ${SLEEP_TIME}
			killInfra ${ZOOKEEPER_APP_NAME}; sleep ${SLEEP_TIME}
		;;
		*)
			log INFO "GYMPB0000I: Application name is missing."; npidUsage
		;;
	esac
}

##
## For CMD "status"
##
printZookeeperStatus() {
	if [ `isZookeeperStarted` -eq 1 ]; then
		log INFO "GYMPB0000I: ${ZOOKEEPER_READABLE} started."
	else
		log INFO "GYMPB0000I: ${ZOOKEEPER_READABLE} stopped."
	fi
}

printKafkaStatus() {
	if [ `isKafkaStarted` -eq 1 ]; then
		log INFO "GYMPB0000I: ${KAFKA_READABLE} started."
	else
		log INFO "GYMPB0000I: ${KAFKA_READABLE} stopped."
	fi
}

printHadoopStatus() {
	if [ `isHadoopStarted` -eq 1 ]; then
		log INFO "GYMPB0000I: ${HADOOP_READABLE} started."
	else
		log INFO "GYMPB0000I: ${HADOOP_READABLE} stopped."
	fi
}

printNpiStatus() {
	npiStatus=`getNpiStatus`
	if [ ${npiStatus} -eq 0 ]; then
		log INFO "GYMPB0000I: ${NPI_READABLE} stopped."
	elif [ ${npiStatus} -eq 1 ]; then
		log INFO "GYMPB0000I: ${NPI_READABLE} started."
	elif [ ${npiStatus} -eq 2 ]; then
		log INFO "GYMPB0000I: ${NPI_READABLE} partially started."
	fi
}

statusRoutine() {
	case "${1}" in
		"${ZOOKEEPER_APP_NAME}") 
			printZookeeperStatus
		;;
		"${KAFKA_APP_NAME}") 
			printKafkaStatus		
		;;
		"${HADOOP_APP_NAME}") 
			printHadoopStatus		
		;;
		"${NPI_STORAGE_APP_NAME}" | "${NPI_ANALYTICS_APP_NAME}" | "${NPI_COLLECTOR_APP_NAME}" | "${NPI_UI_APP_NAME}") 
			printNpiStatus
		;;
		"${NPI_APP_NAME}") ;;
		"all")
			printZookeeperStatus; printKafkaStatus; printHadoopStatus; printNpiStatus
		;;
		*)
			log INFO "GYMPB0000I: Application name is missing."; npidUsage; exit 0 # explicitly, since no error
		;;
	esac
}
