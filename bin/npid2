#!/bin/bash

############################################################
## C O N S T A N T S #######################################
############################################################
## New variables that are global
############################################################
ZOOKEEPER="zk"
KAFKA="kafka"
HADOOP="spark_hadoop"
NPI="npi"
TRY_COUNT=5
SLEEP_TIME=5

SCRIPT=$0
# Routine below facilitates the full qualified paths
if [ "`echo $0 | cut -c1`" = "." ]; then
   SCRIPT="`pwd`/`echo "$0" | sed 's/\.\///g'`"
elif [ "`echo $0 | cut -c1`" != "/" ]; then
   SCRIPT="`pwd`/$0"
fi

BIN_DIR=`dirname $SCRIPT`
PROG_DNAME=`basename $SCRIPT`
PROG_NAME=`echo $PROG_DNAME | sed s/.$//`
PROG_NAME2=`echo $PROG_NAME | sed s/d$//` # The correct product name
PROG_HOME=`dirname $BIN_DIR`
PROG_VERSION=`cat $BIN_DIR/$PROG_NAME2 | grep ^PROG_VERSION= | awk -F"=" '{print $2}'`

############################################################
## E N V # C O N D I T I O N I N G #########################
############################################################
# Re-using existing bootstraps from docker
DOCKER_DIR=${PROG_HOME}/docker
BOOTSTRAP="bootstrap.sh"
ENV_FILE="npi_env.sh"


# New environmental variables
SH_SHELL=`which sh`
BASH_SHELL=`which bash`
SERVICES_DIR=${PROG_HOME}/services

# New exports
export NPI_HOME=${PROG_HOME}
export NAMENODE=true
export USER_CONFIG=false
export HADOOP_PREFIX=${SERVICES_DIR}/hadoop
export STORAGE_URL=$HADOOP_NAMENODE_URL
export ZK_URL=$ZOOKEEP_URL
export ZKPREFIX=""

LOG_DIR=${PROG_HOME}/log
CONSOLE_LOG=${LOG_DIR}/${PROG_DNAME}.log
VAR_DIR=${PROG_HOME}/var
PIDFILE=${VAR_DIR}/${PROG_NAME}.pid
PIDFILE2=${VAR_DIR}/frameworks.pid # temporary only

if [ ! -d "${LOG_DIR}" ]; then
  mkdir -p ${LOG_DIR}
  if [ "$?" != 0 ]; then
    log ERROR "GYMPB0100E: Create directory $LOG_DIR failed!  Check permissions on parent directory."
    exit 1
  fi
fi

if [ ! -d "${VAR_DIR}" ]; then
  mkdir -p ${VAR_DIR}
  if [ "$?" != 0 ]; then
    log ERROR "GYMPB0101E: Create directory $VAR_DIR failed! Check permissions on parent directory."
    exit 1
  fi
fi

############################################################
## E X I S T I N G # F U N C T I O N S #####################
############################################################
log()
{
  severity=$1
  shift
  timestamp=`date "+%Y-%m-%d %H:%M:%S.%N"|cut -b1-23`
  echo "[${severity}] [${timestamp}] [npid] $@" | tee -a ${CONSOLE_LOG}
}

showVersion()
{
  log INFO "GYMPB0102I: Application: ${PROG_NAME2} Version: ${PROG_VERSION}"
  exit 0
}


## Zookeeper
startZookeeper() {
}

stopZookeeper() {
}

## Kafka
startKafka() {
}

stopKafka() {
}

## Hadoop
startaHadoop() {
}

stopHadoop() {
}

## Npi
startNpi() {
}

stopNpi() {
}

checkStatus() {
	
}

############################################################
## N E W # F U N C T I O N S ###############################
############################################################
writePID() 
{
	if [ $# -eq 2 ]
	then
		echo $2 >> ${VAR_DIR}/${1}.pid
	else
		log ERROR "GYMPB0000E: Not enough arguments to write into PID file."
		exit 1
	fi
}

##
## USAGE: checkZookeeper <CMD> <PATTERN>
##
checkZookeeper() {
	tryCount=${TRY_COUNT}
	isZookeeperUp=0
	host=`echo ${ZOOKEEP_URL} | cut -d: -f1`
	port=`echo ${ZOOKEEP_URL} | cut -d: -f2`

	while [ ${tryCount} -ne 0 ]; do
		ncResult=`echo ${1} | nc ${host} ${port} | grep ${2}`
		if [ ! -z "${ncResult}" ]; then
			isZookeeperUp=1
			break			
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isZookeeperUp} -eq 0 ]; then
		log ERROR "GYMPB0000E: Zookeeper / Kafka is not starting."
		exit 1
	fi
}

##
## There are initial errors not able surpress by this script ***
##
checkHadoop() {
	isHadoopUp=0
	tryCount=${TRY_COUNT}
	cmd="${HADOOP_PREFIX}/bin/hdfs dfsadmin -report"
	
	while [ ${tryCount} -ne 0 ]; do
		dfsAdminResult=`${cmd}`
		if [ ! -z "${dfsAdminResult}" ]; then
			isHadoopUp=1
			break			
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isHadoopUp} -eq 0 ]; then
		log ERROR "GYMPB0000E: Hadoop is not starting."
		exit 1
	fi
	
	isHadoopUp=0
	tryCount=${TRY_COUNT}
	cmd="${HADOOP_PREFIX}/bin/hdfs dfs -ls ${HADOOP_NAMENODE_URL}"

	while [ ${tryCount} -ne 0 ]; do
		dfsResult=`${cmd} | grep "work"`
		if [ ! -z "${dfsResult}" ]; then
			isHadoopUp=1
			break			
		fi
		sleep ${SLEEP_TIME}
		tryCount=$(( ${tryCount} - 1 ))
	done

	if [ ${isHadoopUp} -eq 0 ]; then
		log ERROR "GYMPB0000E: Hadoop is not starting."
		exit 1
	fi
}

##
## E.g.
## npid start - starts all framework + npi
## npid start zookeeper
## npid start kafka
## npid start hadoop
## npid start npi - only starts npi
## npid start npi-storage
## npid start npi-analytics
## npid start npi-collector
## npid start npi-ui
##	
npidUsage() {
	echo "Usage: npid {start|stop|restart|kill|status|version|help} [<component_name>|<service_name>]"
	echo "component_name: npi, npi-storage, npi-analaytics, npi-collector, npi-ui"
	echo "service_name: zookeeper, kafka, hadoop"
	echo ""
	echo "Example: "
	echo "	1) npid start"
	echo "	2) npid start npi"
	echo "	3) npid start zookeeper"
	echo "	4) npid stop"
}

# Assuming USERS has modified this file
source ${DOCKER_DIR}/${ENV_FILE}

# Manage input arguments from here
if [ $# -lt 1 ]; then
	npidUsage
	exit -1
fi

ARG1=$1
ARG2=$2

case "${ARG1}" in
	start)
		if [ -z "${ARG2}"]; then
		else
		fi
	;;
	stop)
	;;
	restart)
	;;
	kill)
	;;
	status)
	;;
	version)
		showVersion
	;;
	help)
	;;
	*)
	;;
esac

exit 2; 

############################################################
## M A I N #################################################
############################################################

echo "Starting Zookeeper"
ZOOKEEPER_LOG=${LOG_DIR}/${ZOOKEEPER}.log
${SH_SHELL} ${DOCKER_DIR}/${ZOOKEEPER}/${BOOTSTRAP} >>${ZOOKEEPER_LOG} 2>>${ZOOKEEPER_LOG} & # Everything into log file
writePID ${ZOOKEEPER} ${!}
checkZookeeper "stat" "Mode:"
echo "Started Zookeeper"

# Check for log message before proceed ??? For each framework processes

echo "Starting Kafka"
KAFKA_LOG=${LOG_DIR}/${KAFKA}.log
${SH_SHELL} ${DOCKER_DIR}/${KAFKA}/${BOOTSTRAP} >>${KAFKA_LOG} 2>>${KAFKA_LOG} &
writePID ${KAFKA} ${!}
checkZookeeper "dump" "/kafka/"
echo "Started Kafka"

echo "Starting Hadoop"
HADOOP_LOG=${LOG_DIR}/${HADOOP}.log
${BASH_SHELL} ${DOCKER_DIR}/${HADOOP}/${BOOTSTRAP} >>${HADOOP_LOG} 2>>${HADOOP_LOG} & # Need /bin/bash instead of /bin/sh ???
writePID ${HADOOP} ${!}
checkHadoop
echo "Started Hadoop"

echo "Starting NPI with Options"
NPI_LOG=${LOG_DIR}/${NPI}.log
${BASH_SHELL} ${DOCKER_DIR}/${NPI}/${BOOTSTRAP} >/dev/null 2>>${NPI_LOG} &
writePID ${NPI} ${!}
echo "Started NPI with Options"

exit 0
