#!/bin/bash

SCRIPT=$0
# Routine below facilitates the full qualified paths
if [ "`echo $0 | cut -c1`" = "." ]; then
   SCRIPT="`pwd`/`echo "$0" | sed 's/\.\///g'`"
elif [ "`echo $0 | cut -c1`" != "/" ]; then
   SCRIPT="`pwd`/$0"
fi

BIN_DIR=`dirname $SCRIPT`
PROG_DNAME=`basename $SCRIPT`
PROG_NAME=`echo $PROG_DNAME | sed s/.$//`
PROG_NAME2=`echo $PROG_NAME | sed s/d$//` # The correct product name
PROG_HOME=`dirname $BIN_DIR`
PROG_VERSION=`cat $BIN_DIR/$PROG_NAME2 | grep ^PROG_VERSION= | awk -F"=" '{print $2}'`

if [ -z "$PROG_HOME" ] ; then
  ## resolve links - $0 may be a link to PROG_HOME
  PRG="$0"

  # need this for relative symlinks
  while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
      PRG="$link"
    else
      PRG="`dirname "$PRG"`/$link"
    fi
  done

  saveddir=`pwd`

  PROG_HOME=`dirname "$PRG"`/..
  # make it fully qualified
  PROG_HOME=`cd "$PROG_HOME" && pwd`

  cd "$saveddir"
fi

## =========================================================
## New global variables
## Pending:
##	1. Should these variables be consolidated into one file ???
## =========================================================

# Application names
ZOOKEEPER_APP_NAME="zookeeper"
KAFKA_APP_NAME="kafka"
HADOOP_APP_NAME="hadoop"
NPI_APP_NAME="npi" # Gonna deprecate soon
NPI_STORAGE_APP_NAME="npi-storage" # storage
NPI_ANALYTICS_APP_NAME="npi-analytics" # analytics
NPI_COLLECTOR_APP_NAME="npi-collector" # collector
NPI_UI_APP_NAME="npi-ui" # ui

# Application names (human readable)
ZOOKEEPER_READABLE="Zookeeper"
KAFKA_READABLE="Kafka"
HADOOP_READABLE="Hadoop"
NPI_READABLE="NPI"
NPI_STORAGE_READABLE="Storage"
NPI_ANALYTICS_READABLE="Analytics"
NPI_COLLECTOR_READABLE="Collector"
NPI_UI_READABLE="UI"

# Reflects folder names inside docker directory
ZOOKEEPER="zk"
KAFKA="kafka"
HADOOP="spark_hadoop"
NPI="npi"

# Global parameters
TRY_COUNT=10
SLEEP_TIME=5

# New environmental variables
SH_SHELL=`which sh`
BASH_SHELL=`which bash`
SERVICES_DIR=${PROG_HOME}/services
RESOURCES_DIR=${BIN_DIR}/resources

# Environment exports
# Pending:
#	1. Need to segregate out exports for each individual application
#	2. Move relevant variables into npi_env.sh; currently resides in bin/resource/envSettings
export NPI_HOME=${PROG_HOME}

source ${RESOURCES_DIR}/envSettings # This needs revision !!!

LOG_DIR=${PROG_HOME}/log
CONSOLE_LOG=${LOG_DIR}/${PROG_DNAME}.log
VAR_DIR=${PROG_HOME}/var

# Component logs
ZOOKEEPER_LOG=${LOG_DIR}/${ZOOKEEPER_APP_NAME}.log
KAFKA_LOG=${LOG_DIR}/${KAFKA_APP_NAME}.log
HADOOP_LOG=${LOG_DIR}/${HADOOP_APP_NAME}.log
NPI_LOG=${LOG_DIR}/${NPI_APP_NAME}.log

DOCKER_DIR=${PROG_HOME}/docker		
ENV_FILE="npi_env.sh"

if [ ! -d "${LOG_DIR}" ]; then
  mkdir -p ${LOG_DIR}
  if [ "$?" != 0 ]; then
    log ERROR "GYMPB0100E: Create directory $LOG_DIR failed!  Check permissions on parent directory."
    exit 1
  fi
fi

if [ ! -d "${VAR_DIR}" ]; then
  mkdir -p ${VAR_DIR}
  if [ "$?" != 0 ]; then
    log ERROR "GYMPB0101E: Create directory $VAR_DIR failed! Check permissions on parent directory."
    exit 1
  fi
fi

## =========================================================
## Existing functions
## =========================================================
log() {
  severity=$1
  shift
  timestamp=`date "+%Y-%m-%d %H:%M:%S.%N"|cut -b1-23`
  echo "[${severity}] [${timestamp}] [npid] $@" | tee -a ${CONSOLE_LOG}
}

showVersion() {
  log INFO "GYMPB0102I: Application: ${PROG_NAME2} Version: ${PROG_VERSION}"
  exit 0
}

# check ulimit parameters
check_ulimit_param() {
  parameter=$1
  name=$2
  minvalue=$3
  currentulimitvalue=`ulimit ${parameter}`
  if [ ${currentulimitvalue} -lt ${minvalue} ]; then
     #attempt to set ulimit
     local sout
     sout=$(ulimit -S ${parameter} ${minvalue} 2>&1)
     if [ "$?" != 0 ]; then
        log WARN "GYMPB0103W: ulimit parameter ${parameter} (${name}) is less than minimum value ${minvalue}! Fix by adding two lines to /etc/security/limits.conf: \"${USER} hard nofile ${minvalue}\" and \"${USER} soft nofile ${minvalue}\" and then log out the ${USER} user and log back in for the changes to take effect."
        log WARN "GYMPB0104W: Standard error from ulimit command is \"${sout}\""
     fi
  fi
}

# test UDP tuning parameters
check_sysctl_param() {
  parameter=$1
  minvalue=$2
  currentvalue=`/sbin/sysctl ${parameter} | awk -F'= ' '{print $2}'`
  if [ ${currentvalue} -lt ${minvalue} ]; then
    if [ "${ROOT}" = "YES" ]; then
       sysctl ${parameter}=${minvalue}
    else
       log ERROR "GYMPB0105E: sysctl parameter ${parameter}=${currentvalue} is less than required value ${minvalue}! Fix by adding \"${parameter}=${minvalue}\" to /etc/sysctl.conf and running sysctl -p as root. Alternatively, run ${PROG_NAME} as root."
       ERRORS=$(($ERRORS + 1))
    fi
  fi
}

check_parameters() {
  ERRORS=0
  # check if root
  if [ "${USER}" = "root" ]; then ROOT=YES; fi

  if [ "${IGNORESYSCHECK}" != "Y" ]; then
    check_ulimit_param "-n" "open files" 8096
    check_sysctl_param net.core.rmem_default 33554432
    check_sysctl_param net.core.rmem_max 33554432
    check_sysctl_param net.core.netdev_max_backlog 10000
    if [ "${ERRORS}" != "0" ]; then
      log ERROR "GYMPB0106E: Another kernel parameter error is fatal. Exiting. Check ${CONSOLE_LOG} for GYMPB0105E errors."
      exit 1
    fi
  fi
}

# ======================================
# Source relevant shell scripts 
# ======================================
source ${RESOURCES_DIR}/functions
source ${RESOURCES_DIR}/dependencies
source ${RESOURCES_DIR}/zookeeperFunctions
source ${RESOURCES_DIR}/kafkaFunctions
source ${RESOURCES_DIR}/hadoopFunctions
source ${RESOURCES_DIR}/npiFunctions
source ${RESOURCES_DIR}/routines

# Assuming USERS has modified this file
# Pending:
# 	1. The npi_env.sh needs to be updated accordingly
source ${DOCKER_DIR}/${ENV_FILE}

## =========================================================
## Main controller
## =========================================================

IGNORESYSCHECK="N"
if [ "${1}" == "-ignoresyscheck" ]; then
  export IGNORESYSCHECK="Y"
  shift
fi
ARG1=$1
shift
ARG2=$1

# Manage input arguments from here
if [ -z "${ARG1}" ] || [ -z "${ARG2}" ] ; then
	log ERROR "GYMPB0106E: Not enough arguments."
	npidUsage
	exit 1
fi

case "${ARG1}" in
	start)
		startRoutine ${ARG2}
	;;
	stop)
		stopRountine ${ARG2}
	;;
	restart)
		restartRoutine ${ARG2}
	;;
	kill)
		killRoutine ${ARG2}
	;;
	status)
		statusRoutine ${ARG2}
	;;
	version)
		showVersion
	;;
	help)
		npidUsage
	;;
	# This is for testing purpose
	sysCheck)
		check_parameters
	;;
	*)
		npidUsage
	;;
esac

exit 0
